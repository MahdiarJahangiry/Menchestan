using UnityEngine;
using UnityEngine.UI;
using System.Collections;
namespace Menchestan
{
    namespace GamePlay
    {
        namespace Dice
        {
            public class Dice2D : MDice
            {
                private Image hurt;
                private DiceSide2D[] diceSides;
                protected override void OnInit()
                {
                    hurt = GetComponent<Image>();
                    diceSides = gameObject.GetComponentsInChildren<DiceSide2D>();
                    if (string.IsNullOrEmpty(GameManager.Instance.user.selectedDice))
                        hurt.sprite = GameManager.Instance.iabManager.icons["dice001"];
                    else
                        hurt.sprite = GameManager.Instance.iabManager.icons[GameManager.Instance.user.selectedDice];
                    hurt.color = bodyColor;
                    foreach (var side in diceSides)
                    {
                        side.OnAwake();
                        side.dot.color = dotColor;
                    }
                }
                // If you left click over the dice then RollTheDice coroutine is started
                public override void Roll(int value)
                {
                    if (!thrown)
                        StartCoroutine(RollTheDice(value));
                }
                private void OnMouseDown()
                {
                    OnRollRequested(-1);
                }
                // Coroutine that rolls the dice
                private IEnumerator RollTheDice(int value)
                {
                    thrown = true;
                    // Variable to contain random dice side number.
                    // It needs to be assigned. Let it be 0 initially
                    int randomDiceSide = 0;
                    int prevRandomSide = 0;
                    // Loop to switch dice sides ramdomly
                    // before final side appears. 20 itterations here.
                    for (int i = 0; i <= 20; i++)
                    {
                        if (isStop)
                        {
                            isStop = false;
                            thrown = false;
                            yield break;
                        }
                        // Pick up random value from 0 to 5 (All inclusive)
                        prevRandomSide = randomDiceSide;
                        if (i == 20 && value != -1)
                            randomDiceSide = value - 1;
                        else
                            randomDiceSide = Random.Range(0, 6);
                        // Set sprite to upper face of dice from array according to random value
                        //hurt.sprite = diceSides[randomDiceSide];
                        if (prevRandomSide != randomDiceSide)
                        {
                            SetSide(randomDiceSide);
                            // Pause before next itteration
                            yield return new WaitForSeconds(0.05f);
                        }
                        yield return null;
                    }

                    // Assigning final side so you can use this value later in your game
                    // for player movement for example
                    value = randomDiceSide + 1;
                    thrown = false;
                    OnDiceRolled(value);
                }
                private void SetSide(int value)
                {
                    foreach (DiceSide2D v in diceSides)
                    {
                        v.gameObject.SetActive(false);
                    }
                    for (int j = 0; j <= value; j++)
                    {
                        diceSides[j].transform.localPosition = diceSides[value].positions[j];
                    }
                    for (int j = 0; j <= value; j++)
                    {
                        diceSides[j].gameObject.SetActive(true);
                    }
                }
                public override void ShowSide(int value)
                {
                    SetSide(value - 1);
                }
                public override void Stop()
                {
                    if (thrown)
                        isStop = true;
                }
            }
        }
    }
}